
// src/js/HeroLoader.js
import * as THREE from 'three';
import { gsap } from 'gsap';

const IS_MOBILE = window.innerWidth <= 768;
const PARTICLE_COUNT = IS_MOBILE ? 3000 : 5500;

export default class HeroLoader {
    constructor(loaderSelector, logoPath = '/assets/images/logo.png', options = {}) {
        this.loaderElement = document.querySelector(loaderSelector);
        if (!this.loaderElement) {
            console.error('[HeroLoader] Loader element not found:', loaderSelector);
            return;
        }

        this.backgroundElement = this.loaderElement.querySelector('#loader-background');
        this.contentElement = this.loaderElement.querySelector('#loader-content');
        
        if (!this.backgroundElement || !this.contentElement) {
            console.error('[HeroLoader] Required child elements not found');
            return;
        }

        // Configuration
        this.logoPath = logoPath;
        this.options = {
            particleSize: IS_MOBILE ? 0.06 : 0.08,
            animationDuration: 2.8,
            formationDelay: 1.0,
            colorPalette: [
                '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7',
                '#DDA0DD', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9',
                '#82E0AA', '#F8C471', '#D7BDE2', '#AED6F1', '#A3E4D7'
            ],
            logoScale: IS_MOBILE ? 0.8 : 1.2,
            edgeSpawnDistance: 2.5,
            transitionIntensity: 0.8,
            glowIntensity: 1.2,
            flashDuration: 0.3,
            logoFadeInDuration: 0.8,
            ...options
        };

        // Three.js setup
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({ 
            alpha: true, 
            antialias: !IS_MOBILE,
            powerPreference: 'high-performance'
        });

        // Animation state
        this.particles = null;
        this.particleMaterial = null;
        this.isAnimating = false;
        this.animationFrameId = null;
        this.clock = new THREE.Clock();
        
        // Logo data
        this.logoPositions = [];
        this.logoColors = [];
        this.logoCanvas = null;
        this.logoContext = null;
        this.logoImage = null;
        this.logoElement = null;
        
        console.log('[HeroLoader] Initialized successfully');
    }

    async loadLogoImage() {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            img.onload = () => {
                console.log('[HeroLoader] Logo image loaded:', img.width, 'x', img.height);
                this.logoImage = img;
                
                // Create canvas to analyze the image
                this.logoCanvas = document.createElement('canvas');
                this.logoContext = this.logoCanvas.getContext('2d');
                
                // Set canvas size (optimize for performance while maintaining quality)
                const maxSize = IS_MOBILE ? 150 : 200;
                const scale = Math.min(maxSize / img.width, maxSize / img.height);
                
                this.logoCanvas.width = img.width * scale;
                this.logoCanvas.height = img.height * scale;
                
                // Draw and analyze the image
                this.logoContext.drawImage(img, 0, 0, this.logoCanvas.width, this.logoCanvas.height);
                this.extractLogoPositions();
                
                resolve();
            };
            
            img.onerror = () => {
                console.warn('[HeroLoader] Failed to load logo image, using fallback text');
                this.createFallbackLogo();
                resolve();
            };
            
            // Try different path variations
            const paths = [
                this.logoPath,
                `./public${this.logoPath}`,
                `.${this.logoPath}`,
                `chemactiva-website/public${this.logoPath}`
            ];
            
            this.tryLoadImagePaths(img, paths, 0, resolve, reject);
        });
    }

    tryLoadImagePaths(img, paths, index, resolve, reject) {
        if (index >= paths.length) {
            console.warn('[HeroLoader] All logo paths failed, using fallback');
            this.createFallbackLogo();
            resolve();
            return;
        }

        img.src = paths[index];
        
        // If this path fails, try the next one after a short delay
        setTimeout(() => {
            if (!img.complete || img.naturalHeight === 0) {
                this.tryLoadImagePaths(img, paths, index + 1, resolve, reject);
            }
        }, 100);
    }

    extractLogoPositions() {
        if (!this.logoContext) return;

        const imageData = this.logoContext.getImageData(0, 0, this.logoCanvas.width, this.logoCanvas.height);
        const data = imageData.data;
        const positions = [];
        const colors = [];
        
        // Sample pixels from the image (skip some for performance)
        const step = IS_MOBILE ? 3 : 2;
        const centerX = this.logoCanvas.width / 2;
        const centerY = this.logoCanvas.height / 2;
        
        for (let y = 0; y < this.logoCanvas.height; y += step) {
            for (let x = 0; x < this.logoCanvas.width; x += step) {
                const index = (y * this.logoCanvas.width + x) * 4;
                const r = data[index];
                const g = data[index + 1];
                const b = data[index + 2];
                const a = data[index + 3];
                
                // Only include pixels that are not transparent and not pure white
                if (a > 50 && !(r > 240 && g > 240 && b > 240)) {
                    // Convert pixel coordinates to 3D world coordinates
                    const worldX = ((x - centerX) / centerX) * this.options.logoScale;
                    const worldY = -((y - centerY) / centerY) * this.options.logoScale;
                    const worldZ = (Math.random() - 0.5) * 0.2; // Reduced Z variation
                    
                    positions.push(new THREE.Vector3(worldX, worldY, worldZ));
                    
                    // Use original image colors with some enhancement
                    const color = new THREE.Color(r / 255, g / 255, b / 255);
                    color.multiplyScalar(1.1); // Slight enhancement
                    colors.push(color);
                }
            }
        }
        
        this.logoPositions = positions;
        this.logoColors = colors;
        
        console.log('[HeroLoader] Extracted', positions.length, 'logo positions from image');
    }

    createFallbackLogo() {
        // Create a simple fallback logo pattern
        const text = 'LOGO';
        const positions = [];
        const colors = [];
        
        for (let i = 0; i < text.length; i++) {
            const letterPositions = this.generateLetterPositions(text[i], (i - text.length/2) * 0.6, 0);
            positions.push(...letterPositions);
            
            // Add colors for each position
            const letterColor = new THREE.Color(this.options.colorPalette[i % this.options.colorPalette.length]);
            for (let j = 0; j < letterPositions.length; j++) {
                colors.push(letterColor.clone());
            }
        }
        
        this.logoPositions = positions;
        this.logoColors = colors;
        
        console.log('[HeroLoader] Created fallback logo with', positions.length, 'positions');
    }

    generateLetterPositions(letter, centerX, centerY) {
        const positions = [];
        const patterns = {
            'L': [[0,0.5],[0,0.25],[0,0],[0,-0.25],[0,-0.5],[0.2,-0.5],[0.4,-0.5]],
            'O': [[0,0.5],[0.2,0.4],[0.3,0.2],[0.3,0],[0.3,-0.2],[0.2,-0.4],[0,-0.5],[-0.2,-0.4],[-0.3,-0.2],[-0.3,0],[-0.3,0.2],[-0.2,0.4]],
            'G': [[0.3,0.5],[0.1,0.5],[-0.1,0.5],[-0.3,0.3],[-0.3,0.1],[-0.3,-0.1],[-0.3,-0.3],[-0.1,-0.5],[0.1,-0.5],[0.3,-0.5],[0.3,-0.2],[0.1,-0.2]],
            default: [[0,0.5],[0,0.25],[0,0],[0,-0.25],[0,-0.5],[0.15,0.3],[0.15,0],[0.15,-0.3]]
        };

        const pattern = patterns[letter.toUpperCase()] || patterns.default;
        pattern.forEach(([x, y]) => {
            positions.push(new THREE.Vector3(
                centerX + x + (Math.random() - 0.5) * 0.05,
                centerY + y + (Math.random() - 0.5) * 0.05,
                (Math.random() - 0.5) * 0.2
            ));
        });

        return positions;
    }

    createLogoElement() {
        // Create the actual logo image element
        this.logoElement = document.createElement('img');
        this.logoElement.src = this.logoImage ? this.logoImage.src : this.logoPath;
        this.logoElement.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0);
            max-width: ${IS_MOBILE ? '150px' : '200px'};
            max-height: ${IS_MOBILE ? '150px' : '200px'};
            opacity: 0;
            z-index: 10;
            pointer-events: none;
        `;
        
        this.contentElement.appendChild(this.logoElement);
    }

    initThreeScene() {
        if (!this.contentElement) {
            console.error('[HeroLoader] Content element not available');
            return;
        }

        // Set up renderer
        const width = this.contentElement.clientWidth || 800;
        const height = this.contentElement.clientHeight || 600;
        
        this.renderer.setSize(width, height);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.camera.position.z = 5;

        // Clear canvas area only (preserve logo element)
        const existingCanvas = this.contentElement.querySelector('canvas');
        if (existingCanvas) {
            this.contentElement.removeChild(existingCanvas);
        }
        this.contentElement.appendChild(this.renderer.domElement);

        // Create logo element for transition
        this.createLogoElement();

        // Create particles
        this.createParticles();
        
        console.log('[HeroLoader] Three.js scene initialized');
    }

    createParticles() {
        const geometry = new THREE.BufferGeometry();
        const positions = new Float32Array(PARTICLE_COUNT * 3);
        const targetPositions = new Float32Array(PARTICLE_COUNT * 3);
        const colors = new Float32Array(PARTICLE_COUNT * 3);
        const sizes = new Float32Array(PARTICLE_COUNT);
        const opacities = new Float32Array(PARTICLE_COUNT);
        const velocities = new Float32Array(PARTICLE_COUNT * 3);

        // Calculate screen dimensions in world space
        const frustumHeight = 2 * Math.tan(THREE.MathUtils.degToRad(this.camera.fov) / 2) * this.camera.position.z;
        const frustumWidth = frustumHeight * this.camera.aspect;
        const spawnDistance = this.options.edgeSpawnDistance;

        for (let i = 0; i < PARTICLE_COUNT; i++) {
            const i3 = i * 3;

            // Spawn particles from screen edges
            const edge = Math.floor(Math.random() * 4);
            let spawnX, spawnY;

            switch (edge) {
                case 0: // Top edge
                    spawnX = (Math.random() - 0.5) * frustumWidth * 1.2;
                    spawnY = frustumHeight * 0.6 + Math.random() * spawnDistance;
                    break;
                case 1: // Right edge
                    spawnX = frustumWidth * 0.6 + Math.random() * spawnDistance;
                    spawnY = (Math.random() - 0.5) * frustumHeight * 1.2;
                    break;
                case 2: // Bottom edge
                    spawnX = (Math.random() - 0.5) * frustumWidth * 1.2;
                    spawnY = -frustumHeight * 0.6 - Math.random() * spawnDistance;
                    break;
                case 3: // Left edge
                    spawnX = -frustumWidth * 0.6 - Math.random() * spawnDistance;
                    spawnY = (Math.random() - 0.5) * frustumHeight * 1.2;
                    break;
            }

            positions[i3] = spawnX;
            positions[i3 + 1] = spawnY;
            positions[i3 + 2] = -2 + Math.random() * 2;

            // Target positions from logo
            if (this.logoPositions.length > 0) {
                const targetIndex = i % this.logoPositions.length;
                const target = this.logoPositions[targetIndex];
                const jitter = 0.06; // Reduced jitter for cleaner formation
                
                targetPositions[i3] = target.x + (Math.random() - 0.5) * jitter;
                targetPositions[i3 + 1] = target.y + (Math.random() - 0.5) * jitter;
                targetPositions[i3 + 2] = target.z + (Math.random() - 0.5) * jitter;

                // Use logo colors if available
                if (this.logoColors.length > 0) {
                    const logoColor = this.logoColors[targetIndex];
                    colors[i3] = logoColor.r;
                    colors[i3 + 1] = logoColor.g;
                    colors[i3 + 2] = logoColor.b;
                } else {
                    const paletteColor = new THREE.Color(this.options.colorPalette[i % this.options.colorPalette.length]);
                    colors[i3] = paletteColor.r;
                    colors[i3 + 1] = paletteColor.g;
                    colors[i3 + 2] = paletteColor.b;
                }
            } else {
                // Fallback positions and colors
                targetPositions[i3] = (Math.random() - 0.5) * 2;
                targetPositions[i3 + 1] = (Math.random() - 0.5) * 2;
                targetPositions[i3 + 2] = 0;

                const paletteColor = new THREE.Color(this.options.colorPalette[i % this.options.colorPalette.length]);
                colors[i3] = paletteColor.r;
                colors[i3 + 1] = paletteColor.g;
                colors[i3 + 2] = paletteColor.b;
            }

            // Initial velocity toward center
            const directionX = -spawnX * 0.08;
            const directionY = -spawnY * 0.08;
            velocities[i3] = directionX + (Math.random() - 0.5) * 0.01;
            velocities[i3 + 1] = directionY + (Math.random() - 0.5) * 0.01;
            velocities[i3 + 2] = (Math.random() - 0.5) * 0.005;

            // Particle properties
            sizes[i] = this.options.particleSize * (0.8 + Math.random() * 0.4);
            opacities[i] = 0;
        }

        // Set geometry attributes
        geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.setAttribute('target', new THREE.BufferAttribute(targetPositions, 3));
        geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
        geometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));
        geometry.setAttribute('alpha', new THREE.BufferAttribute(opacities, 1));
        geometry.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));

        // Simplified shader material (removed rotation effects)
        const vertexShader = `
            attribute float size;
            attribute float alpha;
            attribute vec3 velocity;
            varying vec3 vColor;
            varying float vAlpha;
            varying float vSize;
            uniform float time;
            uniform float transitionProgress;
            
            void main() {
                vColor = color;
                vAlpha = alpha;
                vSize = size;
                
                vec3 pos = position;
                
                // Subtle movement during transition
                pos += velocity * sin(time * 1.5 + length(position) * 0.3) * (1.0 - transitionProgress) * 0.2;
                
                vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
                gl_PointSize = size * (200.0 / -mvPosition.z);
                gl_Position = projectionMatrix * mvPosition;
            }
        `;

        const fragmentShader = `
            varying vec3 vColor;
            varying float vAlpha;
            varying float vSize;
            uniform float time;
            uniform float glowIntensity;
            
            void main() {
                vec2 center = gl_PointCoord - vec2(0.5);
                float dist = length(center);
                
                // Create a soft circular particle
                float alpha = (1.0 - dist * 2.0) * vAlpha;
                alpha = max(0.0, alpha);
                
                // Add subtle glow effect
                float glow = 1.0 / (1.0 + dist * 15.0);
                glow *= glowIntensity;
                
                vec3 finalColor = vColor + vec3(glow * 0.2);
                float finalAlpha = alpha + glow * 0.2;
                
                gl_FragColor = vec4(finalColor, finalAlpha);
            }
        `;

        this.particleMaterial = new THREE.ShaderMaterial({
            uniforms: {
                time: { value: 0 },
                transitionProgress: { value: 0 },
                glowIntensity: { value: this.options.glowIntensity }
            },
            vertexShader,
            fragmentShader,
            blending: THREE.AdditiveBlending,
            depthWrite: false,
            transparent: true,
            vertexColors: true
        });

        this.particles = new THREE.Points(geometry, this.particleMaterial);
        this.scene.add(this.particles);

        console.log('[HeroLoader] Particles created:', PARTICLE_COUNT);
    }

    async start() {
        console.log('[HeroLoader] Starting logo formation animation');
        this.isAnimating = true;

        try {
            // Load logo image first
            await this.loadLogoImage();
            
            // Show loader
            gsap.to(this.contentElement, { opacity: 1, duration: 0.6 });
            
            // Initialize scene
            this.initThreeScene();
            this.animate();

            if (!this.particles) {
                throw new Error('Particles not initialized');
            }

            return new Promise((resolve, reject) => {
                // Get particle data
                const positions = this.particles.geometry.attributes.position.array;
                const targets = this.particles.geometry.attributes.target.array;
                const opacities = this.particles.geometry.attributes.alpha.array;

                // Create main timeline
                const mainTimeline = gsap.timeline({
                    onUpdate: () => {
                        if (this.particles) {
                            this.particles.geometry.attributes.position.needsUpdate = true;
                            this.particles.geometry.attributes.alpha.needsUpdate = true;
                        }
                    },
                    onComplete: () => {
                        // Hold the logo formation briefly
                        gsap.to({}, {
                            duration: 0.8,
                            onComplete: () => {
                                // Start the flash and transition to PNG
                                this.transitionToPngLogo().then(() => {
                                    // Final fade out
                                    const fadeTimeline = gsap.timeline({
                                        onComplete: () => {
                                            if (this.loaderElement) {
                                                this.loaderElement.style.display = 'none';
                                            }
                                            this.stopAnimation();
                                            resolve();
                                        }
                                    });

                                    fadeTimeline
                                        .to(this.backgroundElement, { opacity: 0, duration: 0.8 })
                                        .to(this.contentElement, { opacity: 0, duration: 0.6 }, "-=0.4");
                                });
                            }
                        });
                    }
                });

                // Animate particles to form logo
                for (let i = 0; i < positions.length / 3; i++) {
                    const i3 = i * 3;
                    const delay = Math.random() * this.options.formationDelay;
                    const duration = this.options.animationDuration * (0.8 + Math.random() * 0.4);

                    // Position convergence
                    mainTimeline.to(positions, {
                        [i3]: targets[i3],
                        [i3 + 1]: targets[i3 + 1],
                        [i3 + 2]: targets[i3 + 2],
                        duration: duration,
                        ease: "power3.out"
                    }, delay);

                    // Opacity fade in
                    mainTimeline.to(opacities, {
                        [i]: 1.0,
                        duration: duration * 0.7,
                        ease: "power2.out"
                    }, delay + duration * 0.2);
                }

                // Update transition progress for shader
                mainTimeline.to(this.particleMaterial.uniforms.transitionProgress, {
                    value: 1.0,
                    duration: this.options.animationDuration,
                    ease: "power2.inOut"
                }, 0);

                // Gentle camera zoom
                mainTimeline.to(this.camera.position, {
                    z: 4.2,
                    duration: this.options.animationDuration * 1.1,
                    ease: "power2.inOut"
                }, 0.3);
            });

        } catch (error) {
            console.error('[HeroLoader] Error in start():', error);
            this.stopAnimation();
            throw error;
        }
    }

transitionToPngLogo() {
    return new Promise((resolve) => {
        if (!this.logoElement || !this.particles) {
            resolve();
            return;
        }

        const transitionTL = gsap.timeline({
            onComplete: resolve
        });

        // Create localized flash effect around logo area
        const flashOverlay = document.createElement('div');
        const logoSize = IS_MOBILE ? '180px' : '240px';
        flashOverlay.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            width: ${logoSize};
            height: ${logoSize};
            transform: translate(-50%, -50%);
            background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,0.8) 30%, rgba(255,255,255,0.4) 60%, transparent 100%);
            border-radius: 50%;
            opacity: 0;
            z-index: 5;
            pointer-events: none;
        `;
        this.contentElement.appendChild(flashOverlay);

        // Flash sequence
        transitionTL
            // Intensify particles briefly
            .to(this.particleMaterial.uniforms.glowIntensity, {
                value: 4.0,
                duration: 0.12,
                ease: "power2.out"
            })
            // Flash overlay (localized)
            .to(flashOverlay, {
                opacity: 1,
                scale: 1.2,
                duration: this.options.flashDuration * 0.6,
                ease: "power3.out"
            }, 0.08)
            // Immediately hide all particles
            .call(() => {
                const alphas = this.particles.geometry.attributes.alpha.array;
                for (let i = 0; i < alphas.length; i++) {
                    alphas[i] = 0;
                }
                this.particles.geometry.attributes.alpha.needsUpdate = true;
                this.particles.visible = false;
            }, [], 0.1)
            // Start fading out flash while scaling in PNG logo
            .to(flashOverlay, {
                opacity: 0,
                scale: 1,
                duration: 0.5,
                ease: "power2.inOut"
            }, this.options.flashDuration * 0.5)
            // Scale and fade in PNG logo with slight delay for smoother transition
            .to(this.logoElement, {
                opacity: 1,
                scale: 1,
                duration: this.options.logoFadeInDuration,
                ease: "back.out(1.4)"
            }, this.options.flashDuration * 0.3)
            // Hold logo
            .to({}, { duration: 1.2 })
            // Clean up flash overlay
            .call(() => {
                if (flashOverlay.parentNode) {
                    flashOverlay.parentNode.removeChild(flashOverlay);
                }
            });
    });
}

    animate() {
        if (!this.isAnimating) return;

        this.animationFrameId = requestAnimationFrame(this.animate.bind(this));
        
        const elapsedTime = this.clock.getElapsedTime();
        
        if (this.particles && this.particleMaterial.uniforms) {
            // Update shader uniforms (removed rotation)
            this.particleMaterial.uniforms.time.value = elapsedTime;
        }

        this.renderer.render(this.scene, this.camera);
    }

    stopAnimation() {
        this.isAnimating = false;
        if (this.animationFrameId) {
            cancelAnimationFrame(this.animationFrameId);
            this.animationFrameId = null;
        }
        console.log('[HeroLoader] Animation stopped');
    }

    // Cleanup method
    destroy() {
        this.stopAnimation();
        if (this.renderer) {
            this.renderer.dispose();
        }
        if (this.particles) {
            this.particles.geometry.dispose();
            this.particles.material.dispose();
            this.scene.remove(this.particles);
        }
        if (this.logoElement && this.logoElement.parentNode) {
            this.logoElement.parentNode.removeChild(this.logoElement);
        }
        if (this.logoCanvas) {
            this.logoCanvas = null;
            this.logoContext = null;
        }
        console.log('[HeroLoader] Destroyed');
    }
}
